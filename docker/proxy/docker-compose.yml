# Docker-Compose file for Base Template Container
# Ensure .env file contains used Environment Variables
# CLOUDFLARE_API_TOKEN=<api-token>
# PIHOLE_PASSWORD=<passwd>
# PIHOLE_NETWORK=<172.##.0> Eg: 172.25.0   # Just make sure to check the Networks stack for availability

# Stack Networks
networks:
  default:
    driver: bridge
  dns_net:
    driver: bridge
    ipam:
      config:
      - subnet: ${PIHOLE_NETWORK}.0/16
    
services:
  # NGINX Proxy Manager      
  proxy:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx-proxy-manager
    restart: unless-stopped
    network_mode: host
    volumes:
      - /opt/nginx/data:/data
      - /opt/nginx/letsencrypt:/etc/letsencrypt
    healthcheck:
      test: ["CMD", "/usr/bin/check-health"]
      interval: 10s
      timeout: 3s
      # Default Login: admin@example.com | changeme

  # Dynamic DNS Service for updating if Dynamic IP
  ddns:
    image: favonia/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    # network_mode: host # This bypasses network isolation and makes IPv6 easier (optional; see below)
    restart: always
    user: "1000:1000"   # Run the updater with specific user and group IDs (in that order). | divix:divix
    read_only: true     # Make the container filesystem read-only (optional but recommended)
    cap_drop: [all]     # Drop all Linux capabilities (optional but recommended)
    security_opt: [no-new-privileges:true] # Another protection to restrict superuser privileges (optional but recommended)
    environment:
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - DOMAINS=tn-proxy.divix.biz
      - PROXIED=true
      - IP6_PROVIDER=none

  # Proxy Testing Container
  helloworld:
    image: 'karthequian/helloworld:latest'
    container_name: helloworld
    restart: unless-stopped
    ports:
      - 8888:80/tcp


  # Pi-Hole Container
  pihole:
    container_name: pihole
    hostname: pihole
    image: pihole/pihole:latest # remember to change this if you're using rpi
    network_mode: host
    environment:
      - TZ='America/Chicago'
      - WEBPASSWORD:=${PIHOLE_PASSWORD}'
      - VIRTUAL_HOST=pihole
      - VIRTUAL_PORT=85     # run Pi-Hole WebUI on Port 85
      - LIGHTTPD_PORT=85    # Lighttpd (pi-hole's webserver) on Port 85
      # Unbound is installed in the Host since the Docker Container didn't work
      - PIHOLE_DNS_='127.0.0.1#5335'
      # If we want to NOT pass to Unbound, here are Env Vars for Cloudflare
      #- DNS1=1.1.1.1          # Cloudflare DNS IPv4
      #- DNS2=1.0.0.1          # Secondary Cloudflare DNS IPv4
      #- DNS3=2606:4700:4700::1111  # Cloudflare DNS IPv6 (optional)
      #- DNS4=2606:4700:4700::1001  # Secondary Cloudflare DNS IPv6 (optional)      
    volumes:
      - /opt/pihole/etc-pihole/:/etc/pihole/
      - /opt/pihole/etc-dnsmasq.d/:/etc/dnsmasq.d/
    restart: unless-stopped


  # This container is NOT working, so we removed it, and installed in the Host OS.
  # Unbound Container
  # unbound:
  #   container_name: unbound
  #   image: mvance/unbound:latest # remember to change this if you're using rpi
  #   networks:
  #     dns_net:
  #       ipv4_address: ${PIHOLE_NETWORK}.11
  #   volumes:
  #     - type: bind
  #       read_only: true
  #       source: /opt/unbound/unbound.conf
  #       target: /opt/unbound/etc/unbound/unbound.conf
  #     - type: bind
  #       read_only: true
  #       source: /opt/unbound/a-records.conf
  #       target: /opt/unbound/etc/unbound/a-records.conf
  #     - type: bind
  #       read_only: true
  #       source: /opt/unbound/forward-records.conf
  #       target: /opt/unbound/etc/unbound/forward-records.conf
  #     #- /opt/unbound/unbound.log:/opt/unbound/etc/unbound/unbound.log
  #   ports:
  #     - "5053:53/tcp"     # DNS
  #     - "5053:53/udp"     # DNS
  #   healthcheck:
  #     test: ["NONE"]
  #   restart: unless-stopped

